[{"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\index.js":"1","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\App.js":"2","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Layouts\\ErrorBoundary.js":"3","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Contexts\\ContractContext.js":"4","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Contexts\\AuthContext.js":"5","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Layouts\\Main\\index.js":"6","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Layouts\\Navbar\\index.js":"7","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Reducers\\ContractReducer.js":"8","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Reducers\\AuthReducer.js":"9","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Actions\\AuthActionCreator.js":"10","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Actions\\ContractActionCreator.js":"11","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Toast\\index.js":"12","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Constants\\ActionTypes.js":"13","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Routes\\index.js":"14","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Profile.js":"15","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Products\\product.js":"16","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Register.js":"17","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Admin\\VerifyFarmer.js":"18","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Admin\\VerifyManufacturer.js":"19","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Manufacturers\\manufacturer.js":"20","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Farmers\\farmer.js":"21","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Admin\\index.js":"22","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Products\\index.js":"23","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Manufacturers\\index.js":"24","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Farmers\\index.js":"25","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\index.js":"26","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Rating.js":"27","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\ProductCard.js":"28","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\Stakeholder.js":"29","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\ManufacturerCard.js":"30","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Utils\\product.js":"31","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Utils\\stakeholder.js":"32","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\FarmerCard.js":"33","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Modals\\LaunchProduct.js":"34","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Modals\\AddRawProduct.js":"35","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\MiddleWrapper.js":"36","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\TopWrapper.js":"37","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\BottomWrapper.js":"38","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Loading.js":"39"},{"size":674,"mtime":1684060107000,"results":"40","hashOfConfig":"41"},{"size":736,"mtime":1684060107000,"results":"42","hashOfConfig":"41"},{"size":1365,"mtime":1684060107000,"results":"43","hashOfConfig":"41"},{"size":5190,"mtime":1684060107000,"results":"44","hashOfConfig":"41"},{"size":2070,"mtime":1685517692645,"results":"45","hashOfConfig":"41"},{"size":154,"mtime":1684060107000,"results":"46","hashOfConfig":"41"},{"size":3854,"mtime":1685468610006,"results":"47","hashOfConfig":"41"},{"size":1652,"mtime":1684060107000,"results":"48","hashOfConfig":"41"},{"size":1708,"mtime":1684060107000,"results":"49","hashOfConfig":"41"},{"size":669,"mtime":1684060107000,"results":"50","hashOfConfig":"41"},{"size":1009,"mtime":1684060107000,"results":"51","hashOfConfig":"41"},{"size":301,"mtime":1684060107000,"results":"52","hashOfConfig":"41"},{"size":926,"mtime":1684060107000,"results":"53","hashOfConfig":"41"},{"size":2561,"mtime":1684060107000,"results":"54","hashOfConfig":"41"},{"size":401,"mtime":1684060107000,"results":"55","hashOfConfig":"41"},{"size":8460,"mtime":1684060107000,"results":"56","hashOfConfig":"41"},{"size":2904,"mtime":1685475933606,"results":"57","hashOfConfig":"41"},{"size":860,"mtime":1684060107000,"results":"58","hashOfConfig":"41"},{"size":912,"mtime":1684060107000,"results":"59","hashOfConfig":"41"},{"size":4792,"mtime":1684060107000,"results":"60","hashOfConfig":"41"},{"size":1926,"mtime":1684060107000,"results":"61","hashOfConfig":"41"},{"size":93,"mtime":1684060107000,"results":"62","hashOfConfig":"41"},{"size":3410,"mtime":1684060107000,"results":"63","hashOfConfig":"41"},{"size":117,"mtime":1684060107000,"results":"64","hashOfConfig":"41"},{"size":99,"mtime":1684060107000,"results":"65","hashOfConfig":"41"},{"size":679,"mtime":1684060107000,"results":"66","hashOfConfig":"41"},{"size":500,"mtime":1684060107000,"results":"67","hashOfConfig":"41"},{"size":1924,"mtime":1685512194026,"results":"68","hashOfConfig":"41"},{"size":2281,"mtime":1685512214909,"results":"69","hashOfConfig":"41"},{"size":5029,"mtime":1684060107000,"results":"70","hashOfConfig":"41"},{"size":362,"mtime":1684060107000,"results":"71","hashOfConfig":"41"},{"size":1225,"mtime":1684060107000,"results":"72","hashOfConfig":"41"},{"size":3101,"mtime":1684060107000,"results":"73","hashOfConfig":"41"},{"size":5988,"mtime":1685512055712,"results":"74","hashOfConfig":"41"},{"size":4964,"mtime":1684060107000,"results":"75","hashOfConfig":"41"},{"size":2196,"mtime":1685469089417,"results":"76","hashOfConfig":"41"},{"size":846,"mtime":1685468858778,"results":"77","hashOfConfig":"41"},{"size":1311,"mtime":1684060107000,"results":"78","hashOfConfig":"41"},{"size":408,"mtime":1684060107000,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"openz9",{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\index.js",[],["172","173"],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\App.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Layouts\\ErrorBoundary.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Contexts\\ContractContext.js",["174","175","176"],"import { createContext, useContext, useEffect, useReducer, useState } from \"react\";\nimport { contractReducer } from \"../Reducers/ContractReducer\";\n\nimport MainContract from '../../Smart-Contract/ABI/Main.json';\nimport StakeholderContract from '../../Smart-Contract/ABI/Stakeholder.json';\nimport FarmerContract from '../../Smart-Contract/ABI/Farmer.json';\nimport ManufacturerContract from '../../Smart-Contract/ABI/Manufacturer.json';\nimport ProductContract from '../../Smart-Contract/ABI/Product.json';\nimport { \n  contractStateMain, \n  contractStateProduct,\n  contractStateFarmer, \n  contractStateManufacturer,\n  contractStateStakeholder, \n  contractStateStats \n} from '../Actions/ContractActionCreator';\nimport { authStateStakeholder } from '../Actions/AuthActionCreator';\nimport { AuthContext } from \"./AuthContext\";\n\nexport const ContractContext = createContext();\nexport const ContractContextProvider = ({children}) => {\n  const [contractState, contractDispatch] = useReducer(contractReducer, {\n    isLoading: false,\n    errMess: null,\n    mainContract: null,\n    farmerContract: null,\n    manufacturerContract: null,\n    stakeholderContract: null,\n    productContract: null,\n    stats: {\n      productsCount: 0,\n      transactionsCount: 0,\n      reviewsCount: 0\n    }\n  })\n  const [networkId, setNetworkId] = useState(null);\n  const { authState, authDispatch } = useContext(AuthContext);\n\n  useEffect(() => {\n    (async () => {\n      if(authState.isWeb3Enabled){\n        const web3 = window.web3;\n        const networkId = await web3.eth.net.getId();\n        setNetworkId(networkId);\n        const main = new web3.eth.Contract(MainContract.abi, MainContract.networks[networkId].address);\n        contractDispatch(contractStateMain(main));\n        const product  = new web3.eth.Contract(ProductContract.abi, ProductContract.networks[networkId].address);\n        contractDispatch(contractStateProduct(product));\n        const farmer = new web3.eth.Contract(FarmerContract.abi, FarmerContract.networks[networkId].address);\n        contractDispatch(contractStateFarmer(farmer));\n        const manufacturer = new web3.eth.Contract(ManufacturerContract.abi, ManufacturerContract.networks[networkId].address);\n        contractDispatch(contractStateManufacturer(manufacturer));\n        const stats = {};\n        stats[\"productsCount\"] = await product.methods.getProductsCount().call();\n        stats[\"transactionsCount\"] = await product.methods.getTransactionsCount().call();\n        stats[\"reviewsCount\"] = await product.methods.getReviewsCount().call();\n        contractDispatch(contractStateStats(stats));\n      }\n    })();\n  }, [authState.isWeb3Enabled])\n\n  useEffect(() => {\n    (async () => {\n      if(authState.isAuthenticated && contractState.mainContract){\n        const web3 = window.web3;\n        const role = await contractState.mainContract.methods.getRole(authState.address).call();\n        if( role === \"farmer\"){\n          const farmer = new web3.eth.Contract(FarmerContract.abi, FarmerContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(farmer));\n        }\n        else if(role === 'manufacturer'){\n          const manufacturer = new web3.eth.Contract(ManufacturerContract.abi, ManufacturerContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(manufacturer));\n        }\n        else {\n          const stakeholder = new web3.eth.Contract(StakeholderContract.abi, StakeholderContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(stakeholder));\n        }\n      }\n    })();\n  }, [authState.isAuthenticated, contractState.mainContract])\n\n  useEffect(() => {\n    (async () => {\n      await loadStakeholder();\n    })();\n  }, [contractState.stakeholderContract])\n\n  const loadStakeholder = async () => {\n    if(contractState.stakeholderContract){\n      let stakeholderDetails = await contractState.stakeholderContract.methods.get(authState.address).call({from: authState.address});\n      stakeholderDetails = {\n        id: stakeholderDetails.id,\n        name: stakeholderDetails.name,\n        location: stakeholderDetails.location,\n        role: stakeholderDetails.role === \"\" ? \"new\" : stakeholderDetails.role,\n        isRegistered: stakeholderDetails.role === \"\" ? false : true,\n        isVerified: stakeholderDetails.isVerified\n      }\n      const role = await contractState.mainContract.methods.getRole(authState.address).call();\n      if(role == \"admin\"){\n        stakeholderDetails.role = role;\n      }\n      authDispatch(authStateStakeholder(stakeholderDetails));\n    }\n  }\n\n  const updateStats = async () => {\n    const stats = {};\n    stats[\"productsCount\"] = await contractState.productContract.methods.getProductsCount().call();\n    stats[\"transactionsCount\"] = await contractState.productContract.methods.getTransactionsCount().call();\n    stats[\"reviewsCount\"] = await contractState.productContract.methods.getReviewsCount().call();\n    contractDispatch(contractStateStats(stats));\n  }\n\n  return (\n    <ContractContext.Provider value={{contractState, contractDispatch, updateStats, loadStakeholder}}>\n      {children}\n    </ContractContext.Provider>\n  )\n\n}\n","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Contexts\\AuthContext.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Layouts\\Main\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Layouts\\Navbar\\index.js",["177"],"import { useContext, useState } from \"react\";\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarText, NavbarToggler, NavItem } from \"reactstrap\";\nimport { NavLink } from 'react-router-dom';\n\nimport logo from '../../Assests/Images/logo_mini.jpg';\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\n\nconst Header = () => {\n  const {authState, connectWallet, logout}  = useContext(AuthContext);\n  const [isNavOpen, setIsNavOpen] = useState(false);\n  const isAuthenticated = authState.isAuthenticated;\n  const role = authState.stakeholder.role;\n  const style = {\n    authButton: {\n      fontWeight: 'bolder',\n      color: '#fff',\n    },\n    authText: {\n      color: '#fff',\n    }\n  }\n\n  const toggleNav = () => {\n    setIsNavOpen(!isNavOpen);\n  }\n\n  const roleNavLinks = () => {\n    switch(role) {\n      case 'admin':\n        return (\n          <>\n          <NavItem> \n            <NavLink to=\"/admin/verify/farmer\" className=\"nav-link\">Verify Farmer</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink to=\"/admin/verify/manufacturer\" className=\"nav-link\">Verify Manufacturer</NavLink>\n          </NavItem>\n          </>\n        )\n      case 'farmer':\n        return (\n          <>\n          <NavItem>\n            <NavLink to={`/farmers/${authState.stakeholder.id}`} className=\"nav-link\">Profile</NavLink>\n          </NavItem>\n          </>\n        )\n      case 'manufacturer':\n        return (\n          <>\n          <NavItem>\n            <NavLink to={`/manufacturers/${authState.stakeholder.id}`} className=\"nav-link\">Profile</NavLink>\n          </NavItem>\n          </>\n        )\n      case 'new': \n        return (\n          <>\n          <NavItem>\n            <NavLink to=\"register\" className=\"nav-link\">Register</NavLink>\n          </NavItem>\n          </>\n        )\n      default:\n        return (\n          <>\n          <NavItem>\n            <NavLink to=\"profile\" className=\"nav-link\">Profile</NavLink>\n          </NavItem>\n          </>\n        )\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <Navbar \n        color=\"warning\"\n        expand='md' \n        dark\n      >\n        <NavbarBrand>\n          <img src={logo} />\n           Transecverse\n        </NavbarBrand>\n        <NavbarToggler onClick={toggleNav} >\n          {isNavOpen?\n            <i className=\"fa fa-times\"></i>\n          :\n            <i className=\"fa fa-bars\"></i>\n          }\n        </NavbarToggler>\n        <Collapse navbar isOpen={isNavOpen}>\n          <Nav className=\"mx-auto\" navbar >\n            { isAuthenticated?\n              <>\n              <NavItem>\n                <NavLink className=\"nav-link\" to=\"/\">\n                  Dashboard\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink className=\"nav-link\" to=\"/products\">\n                  Products\n                </NavLink>\n              </NavItem>\n              { roleNavLinks() }\n              </>\n            :\n              \"\"\n            }\n          </Nav>\n          <Nav className=\"ms-auto\" navbar>\n            { isAuthenticated?\n              <>\n              <NavbarText style={style.authText}>\n                {authState.formattedAddress} &nbsp;\n              </NavbarText>\n              <NavItem>\n                <NavbarText type=\"button\" onClick={logout} style={style.authButton}>\n                  <i className=\"fa fa-sign-out fa-lg\"/>Logout\n                </NavbarText>\n              </NavItem>\n              </>\n            :\n              <>\n              <NavItem>\n                <NavbarText type=\"button\" onClick={connectWallet} style={style.authButton}>\n                <i className=\"fa fa-sign-in fa-lg\"/> Login\n                </NavbarText>\n              </NavItem>\n              </>\n            }\n          </Nav>\n        </Collapse>\n      </Navbar>\n      \n    </div>\n  )\n}\nexport default Header;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Reducers\\ContractReducer.js",["178"],"import * as ActionTypes from '../Constants/ActionTypes';\n\nexport const contractReducer = (state, action) => {\n  switch(action.type){\n    case ActionTypes.CONTRACT_STATE_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        errMess: null,\n        mainContract: null,\n        stakeholderContract: null,\n        productContract: null\n      }\n    case ActionTypes.CONTRACT_STATE_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: action.payload,\n        mainContract: null,\n        stakeholderContract: null,\n        productContract: null\n      }\n    case ActionTypes.CONTRACT_STATE_MAIN:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: null,\n        mainContract: action.payload.contract\n      }\n    case ActionTypes.CONTRACT_STATE_FARMER:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: null,\n        farmerContract: action.payload.contract\n      }\n    case ActionTypes.CONTRACT_STATE_MANUFACTURER:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: null,\n        manufacturerContract: action.payload.contract\n      }\n    case ActionTypes.CONTRACT_STATE_STAKEHOLDER:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: null,\n        stakeholderContract: action.payload.contract\n      }\n    case ActionTypes.CONTRACT_STATE_PRODUCT:\n      return {\n        ...state,\n        isLoading: false,\n        errMess: null,\n        productContract: action.payload.contract\n      }\n    case ActionTypes.CONTRACT_STATE_STATS:\n      return {\n        ...state,\n        stats: action.payload.stats\n      }\n  }\n}","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Reducers\\AuthReducer.js",["179"],"import * as ActionTypes from '../Constants/ActionTypes';\n\nexport const authReducuer = (state, action) => {\n  switch(action.type){\n    case ActionTypes.AUTH_STATE_LOADING:\n      return {\n        ...state, \n        isLoading: true, \n        errMess: null, \n        isWeb3Enabled: false, \n        isAuthenticated: false, \n        address: null, \n        formattedAddress: null, \n        stakeholder: {}\n      }\n    case ActionTypes.AUTH_STATE_FAILED:\n      return {\n        ...state, \n        isLoading: false, \n        errMess: action.payload, \n        isAuthenticated: false, \n        address: null, \n        formattedAddress: null, \n        stakeholder: {}\n      }\n    case ActionTypes.AUTH_STATE_ENABLE_WEB3:\n      return {\n        ...state, \n        isLoading: false, \n        isWeb3Enabled: true\n      }\n    case ActionTypes.AUTH_STATE_DISABLE_WEB3:\n      return {\n        ...state, \n        isLoading: false, \n        isWeb3Enabled: false\n      }\n    case ActionTypes.AUTH_STATE_LOGIN:\n      return {\n        ...state, \n        isLoading: false, \n        errMess: null, \n        isAuthenticated: true, \n        address: action.payload.address, \n        formattedAddress: action.payload.address.substring(0,6) + \"...\" + action.payload.address.substring(action.payload.address.length-4),\n        stakeholder: {}\n      }\n    case ActionTypes.AUTH_STATE_LOGOUT:\n      return {\n        ...state, \n        isLoading: false, \n        errMess: null, \n        isAuthenticated: false, \n        address: null, \n        formattedAddress: null, \n        stakeholder: {}\n      }\n    case ActionTypes.AUTH_STATE_STAKEHOLDER:\n      return {\n        ...state,\n        stakeholder: action.payload.stakeholder\n      }\n  }\n}","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Actions\\AuthActionCreator.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Actions\\ContractActionCreator.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Toast\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Constants\\ActionTypes.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Routes\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Profile.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Products\\product.js",["180","181","182","183"],"import { useContext, useEffect, useState } from 'react';\n\nimport '../../Assests/Styles/product.page.css';\nimport { useLocation } from 'react-router-dom';\nimport { fetchManufacturer, formattedAddress } from '../../Services/Utils/stakeholder';\nimport { ContractContext } from '../../Services/Contexts/ContractContext';\nimport { AuthContext } from '../../Services/Contexts/AuthContext';\nimport Toast from '../../Components/Toast';\nimport Rating from '../../Components/Rating';\n\nconst Product = () => {\n  const location = useLocation();\n  const { authState } = useContext(AuthContext);\n  const { contractState, updateStats } = useContext(ContractContext);\n  const [product, setProduct] = useState(location.state.product);\n  const [transferState, setTransferState] = useState({\n    from: authState.address,\n  });\n  const [reviewState, setReviewState] = useState({\n    rating: 0,\n    comment: \"\",\n    from: authState.address,\n  })\n  const [isOwner, setIsOnwer] = useState(authState.address.toLowerCase() == location.state.product.item[\"currentOwner\"].toLowerCase());\n\n  const reload = async () => {\n    const id = location.state.product.item.id;\n    const response = await contractState.productContract.methods.get(id).call({from: authState.address});\n    const product = {\n      \"item\": response.item,\n      \"rawProducts\": response.rawProducts,\n      \"reviews\": response.reviews,\n      \"transactions\": response.transactions,\n      \"manufacturer\": await fetchManufacturer(authState.address, contractState.manufacturerContract, response.item[\"manufacturer\"])\n    }\n    setProduct(product);\n  }\n\n  const transfer = async () => {\n    await contractState.productContract.methods.transfer(transferState.to, product.item.id).send({from: authState.address});\n    await reload();\n    Toast(\"success\", \"Product transferred successfully\");\n    setTransferState({\n      from: authState.address,\n    });\n    // .on('transactionHash', hash => {\n    //   console.log(hash);\n    // })\n    // .on('receipt', receipt => {\n    //   console.log(receipt);\n    // })\n    // .on('confirmation', (confirmationNumber, receipt) => {\n    //   console.log(confirmationNumber, receipt);\n    // })\n    // .on('error', error => {\n    //   console.log(error);\n    // })\n    updateStats();\n  }\n\n  const postReview = async () => {\n    if(!isOwner){\n      Toast(\"error\", \"You are not the owner of this product\");\n      return;\n    }\n    await contractState.productContract.methods.addReview(product.item.id, reviewState.rating, reviewState.comment).send({from: authState.address});\n    await reload();\n    Toast(\"success\", \"Review posted successfully\");\n    setReviewState({\n      rating: 0,\n      comment: \"\",\n      from: authState.address,\n    });\n    updateStats();\n  }\n\n  const features = [\n    {\n      \"icon\": <i className=\"fa fa-certificate fa-2x\"/>,\n      \"label\": \"Verified Products\"\n    },\n    {\n      \"icon\": <i className=\"fa fa-shield fa-2x\"/>,\n      \"label\": \"Secured Transactions\"\n    },\n    {\n      \"icon\": <i className=\"fa fa-rotate-left fa-2x\"/>,\n      \"label\": \"Return Policy\"\n    },\n    {\n      \"icon\": <i className=\"fa fa-lock fa-2x\"/>,\n      \"label\": \"Blockchain Delivered\"\n    },\n    {\n      \"icon\": <i className=\"fa fa-check fa-2x\"/>,\n      \"label\": \"Genuine Products\"\n    }\n  ]\n  return (\n    <div className=\"wrapper\">\n      <div className=\"row top-wrapper\">\n        <div className=\"col-12 col-md-4 tw-left\">\n          <img src={product.item[\"image_url\"]} width=\"100%\"/>\n        </div>\n        <div className=\"col-12 col-md-8 tw-right\">\n          <span className=\"tw-heading1\">\n            {product.item[\"title\"]}\n          </span>\n          <br/>\n          <span className='tw-product-stats d-flex align-items-center'>\n            <Rating rating={product.item[\"rating\"]/20} editable={false}/>\n            &nbsp;| &nbsp;\n            <span>\n              {product.reviews.length} ratings &nbsp;| &nbsp;\n            </span>\n            <span>\n              {product.transactions.length} transactions\n            </span>\n          </span>\n          {new Date(product.item[\"launchDate\"] * 1000).toDateString()}\n          <br/>\n          <span className='tw-features d-flex justify-content-around'>\n            {features.map(feature => (\n              <span className='text-center'>\n                {feature.icon}\n                <br/>\n                <span>{feature.label}</span>\n              </span>\n            ))}\n          </span>\n          <span className='tw-brand'>\n            Brand: {product.manufacturer[\"name\"]} &nbsp;| &nbsp;\n            {product.manufacturer.isRenewableUsed?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Eco Friendly</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Non Eco Friendly</span>\n              </span>\n            }\n          </span>\n          <br/>\n          <span className='tw-seller text-wrap'>\n            Sold by: {formattedAddress(product.item[\"currentOwner\"])}\n          </span>\n          <br/>\n          <div className='tw-transfer-wrapper'>\n            <input type=\"text\" placeholder='address' disabled={!isOwner}\n            onChange={\n              (e) => {\n                setTransferState({\n                  ...transfer,\n                  to: e.target.value\n                })\n              }\n            }/>\n            &nbsp;\n            &nbsp;\n            <button \n              disabled={!isOwner}\n              onClick={transfer}\n            >Transfer</button>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div className=\"middle-wrapper\">\n        <span className='heading'>\n          Ingredients\n        </span>\n        <br/>\n        <span>\n          {product.rawProducts.map(rawProduct => (\n            <span className='me-3'>\n              {rawProduct[\"name\"]} &nbsp;\n              {rawProduct[\"isVerified\"]?\n                <i className='text-success fa fa-check' title='Verified'/>\n              :\n                <i className='text-warning fa fa-exclamation' title='Not verified'/>\n              }\n            </span>\n          ))}\n        </span>\n      </div>\n      <hr/>\n      <div className=\"bottom-wrapper\">\n        <div className='row'>\n          <div className='col-12 col-md-6'>\n            <span className='heading'>\n              Transactions\n            </span>\n            {product.transactions.map(transaction => (\n              <div className='my-1 border'>\n                Transfer From {formattedAddress(transaction[\"from\"])}\n                <br/>\n                Transfer To {formattedAddress(transaction[\"to\"])}\n                <br/>\n                {new Date(transaction[\"date\"] * 1000).toDateString()}\n              </div>\n            ))}\n          </div>\n          <div className='col-12 col-md-6'>\n            <span className='heading'>\n              Reviews\n            </span>\n            <div className='bw-review-wrapper'>\n              <textarea placeholder='Comment' className='col-10' disabled={!isOwner}\n               onChange={\n                (e) => {\n                  setReviewState({\n                    ...reviewState,\n                    comment: e.target.value\n                  })\n                }\n              }/>\n              <br/>\n              <span className='d-flex align-items-center'>\n                <Rating rating={reviewState.rating} editable={isOwner} onChange={\n                  (rating) => {\n                    setReviewState({\n                      ...reviewState,\n                      rating: rating*20\n                    })\n                  }\n                }/>\n                <button onClick={postReview} disabled={!isOwner}>Post</button>\n              </span>\n              <br/>\n            </div>\n            {product.reviews.map(review => (\n              <div className='my-1 border'> \n                <span className='d-flex align-items-center'>\n                  <Rating rating={review[\"rating\"]/20} editable={false}/>\n                  &nbsp;\n                  <span className='badge bg-success'>Verified Purchase</span>\n                </span>\n                Reviewer: &nbsp; {formattedAddress(review[\"reviewer\"])} &nbsp;\n                <br/>\n                Reviewed on: {new Date(review[\"date\"] * 1000).toDateString()}\n                <br/>\n                {review[\"comment\"]}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Product;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Register.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Admin\\VerifyFarmer.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Admin\\VerifyManufacturer.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Manufacturers\\manufacturer.js",["184","185"],"import { useContext, useEffect, useState } from \"react\";\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\nimport ManufacturerCard from \"../../Components/Cards/ManufacturerCard\";\nimport ProductCard from \"../../Components/Cards/ProductCard\";\nimport AddRawProduct from \"../../Components/Modals/AddRawProduct\";\nimport LaunchProduct from \"../../Components/Modals/LaunchProduct\";\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\nimport { ContractContext } from \"../../Services/Contexts/ContractContext\";\nimport { fetchProduct } from \"../../Services/Utils/product\";\nimport { fetchManufacturer } from \"../../Services/Utils/stakeholder\";\n\nconst Manufacturer = () => {\n  const { authState } = useContext(AuthContext);\n  const { contractState } = useContext(ContractContext);\n  const [manufacturerAddress, setManufacturerAddress] = useState(authState.address);\n  const [manufacturer, setManufacturer] = useState({\n    rawProducts: [],\n    launchedProducts: [],\n  });\n  const [isRPModalOpen, setIsRPModalOpen] = useState(false);\n  const [isProductModalOpen, setIsProductModalOpen] = useState(false);\n\n  useEffect(() => {\n    if (contractState.manufacturerContract) {\n      (async () => {\n        await loadManufacturer();\n      })();\n    }\n  }, [])\n\n  const loadManufacturer = async () => {\n    if (contractState.manufacturerContract) {\n      const manufacturerObject = await fetchManufacturer(authState.address, contractState.manufacturerContract, manufacturerAddress);\n      const launchedProducts = [];\n      for (let i = 0; i < manufacturerObject.launchedProductIds.length; i++) {\n        const launchedProduct = await fetchProduct(authState.address, contractState.productContract, manufacturerObject.launchedProductIds[i]);\n        launchedProduct[\"manufacturer\"] = manufacturerObject;\n        launchedProducts.push(launchedProduct);\n      }\n      setManufacturer({\n        ...manufacturerObject,\n        launchedProducts,\n      });\n    }\n  }\n\n  const toggleRPModal = async () => {\n    setIsRPModalOpen(!isRPModalOpen);\n    await loadManufacturer();\n  }\n\n  const toggleProductModal = async () => {\n    setIsProductModalOpen(!isProductModalOpen);\n    await loadManufacturer();\n  }\n\n  return (\n    <div>\n      <AddRawProduct isModalOpen={isRPModalOpen} toggleModalOpen={toggleRPModal} />\n      <LaunchProduct isModalOpen={isProductModalOpen} toggleModal={toggleProductModal} manufacturerRP={manufacturer.rawProducts} />\n      <div className=\"d-flex justify-content-center\">\n        <ManufacturerCard id={manufacturerAddress} manufacturerObject={manufacturer}/>\n      </div>\n      <div className=\"row d-flex align-items-start\">\n        <div className=\"col-12 col-md-6\">\n          <span className=\"d-flex justify-content-around\">\n            <span className=\"text-center heading\">Raw Products</span>\n            <i className=\"text-center fa fa-plus fa-2x\" onClick={toggleRPModal} type=\"button\"/>\n          </span>\n          {manufacturer.rawProducts.map((rawProduct, index) => (\n            <div key={index} className=\"col-12 my-2\">\n              <Card className=\"border-dark rounded\">\n                <CardBody>\n                  <CardTitle className=\"\">\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <span>{rawProduct.name}</span>\n                      <span>\n                        {rawProduct.isVerified ? \n                          <span className=\"badge bg-success\">Verified</span>\n                        :\n                          <span className=\"badge bg-danger\">Not Verified</span>\n                        }\n                      </span>\n                    </div>\n                    <div className=\"text-center\">\n                      <span className=\"badge bg-dark\">Suppliers</span>\n                      <br/>\n                      {rawProduct.boughtFromIds.map((boughtFromId, index) => (\n                        <span className=\"badge bg-secondary \">\n                          {boughtFromId}\n                        </span>\n                      ))}\n                    </div>\n                  </CardTitle>\n                </CardBody>\n              </Card>\n            </div>\n            ))}\n        </div>\n        <div className=\"col-12 col-md-6\">\n          <span className=\"d-flex justify-content-around align-items-center\">\n            <span className=\"text-center heading\">Launched Products</span>\n            <i className=\"text-center fa fa-plus fa-2x\" onClick={toggleProductModal} type=\"button\"/>\n          </span>\n          {manufacturer.launchedProducts.map((product, index) => (\n            <div key={index} className=\"col-12 my-2\">\n              <ProductCard product={product}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Manufacturer;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Farmers\\farmer.js",["186","187"],"import { useContext, useEffect, useState } from \"react\";\n\nimport FarmerCard from \"../../Components/Cards/FarmerCard\";\nimport Toast from \"../../Components/Toast\";\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\nimport { ContractContext } from \"../../Services/Contexts/ContractContext\";\nimport { fetchFarmer } from \"../../Services/Utils/stakeholder\";\n\nconst Farmer = () => {\n  const { authState }  = useContext(AuthContext);\n  const { contractState } = useContext(ContractContext);\n  const [farmerAddress, setFarmerAddress] = useState(authState.address);\n  const [farmer, setFarmer] = useState({});\n  const [addRPState, setAddRPState] = useState(null);\n\n  useEffect(() => {\n    if(contractState.farmerContract){\n      (async () => {\n        setFarmer(await fetchFarmer(authState.address, contractState.farmerContract, farmerAddress));\n      })();\n    }\n  },[])\n\n  const addRawProduct = async () => {\n    if(!addRPState) {\n      Toast(\"error\", \"Please enter a raw product\");\n      return;\n    }\n    try{\n      await contractState.farmerContract.methods.addRawProduct(addRPState).send({from: authState.address});\n      Toast(\"success\", \"Raw product added successfully\");\n      const temp = {\n        ...farmer,\n        rawProducts: [...farmer.rawProducts, addRPState]\n      }\n      setFarmer(temp);\n    } catch(e){\n      Toast(\"error\", e.message);\n    }\n  }\n\n  return (\n    <div className=\"\">\n      <div className = \"d-flex justify-content-center\">\n        {farmer.formattedAddress?\n          <FarmerCard id={farmerAddress} farmerObject={farmer}/>\n        :\n        <div>Loading...</div>}\n      </div>\n      <div className=\"d-flex justify-content-center\">\n        <input type=\"text\" placeholder=\"Raw product\" onChange={\n          (e) => {\n            setAddRPState(e.target.value);\n          }\n        }/>\n        <button onClick={addRawProduct}>Add</button>\n      </div>\n    </div>\n  )\n}\nexport default Farmer;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Admin\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Products\\index.js",["188","189","190","191","192"],"import { useContext, useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Button, Input, InputGroup } from \"reactstrap\";\n\nimport '../../Assests/Styles/products.page.css';\nimport ProductCard from \"../../Components/Cards/ProductCard\";\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\nimport { ContractContext } from \"../../Services/Contexts/ContractContext\";\nimport { fetchManufacturer } from \"../../Services/Utils/stakeholder\";\nimport fake_product from '../../Assests/Images/fake_product.jpg';\nimport Toast from \"../../Components/Toast\";\n\nconst Products = () => {\n  const { authState } = useContext(AuthContext);\n  const { contractState } = useContext(ContractContext);\n  const [productIds, setProductids] = useState([]);\n  const [products, setProducts] = useState({});\n\n  useEffect(() => {\n    if(contractState.productContract){\n      (async () => {\n        const productIds = await contractState.productContract.methods.getItemIds().call({from: authState.address});        \n        setProductids(productIds);\n      })();\n    }\n  },[])\n\n  useEffect(() => {\n    if(contractState.productContract){\n      (async () => {\n        const products = {};\n        for(let i = 0; i < productIds.length; i++){\n          const response = await contractState.productContract.methods.get(productIds[i]).call({from: authState.address});\n          const product = {\n            \"item\": response.item,\n            \"rawProducts\": response.rawProducts,\n            \"reviews\": response.reviews,\n            \"transactions\": response.transactions,\n            \"manufacturer\": await fetchManufacturer(authState.address, contractState.manufacturerContract, response.item[\"manufacturer\"])\n          }\n          if(product.item.manufacturer != \"0x0000000000000000000000000000000000000000\"){\n            products[productIds[i]] = product;\n          }\n        }\n        console.log(products)\n        setProducts(products);\n      })();\n    }\n  }, [productIds])\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"heading\">Products</div>\n      <div align=\"center\">\n        <div className=\"col-10 col-md-3\">\n          <InputGroup>\n            <Input placeholder=\"Search\" id=\"search\"/>\n            <Button onClick={()=> {\n              const productId = document.getElementById(\"search\").value;\n              if(productId == \"\"){\n                Toast(\"error\", \"Please enter a product id\");\n                return;\n              }\n              setProductids([productId]);\n            }}>Search</Button>\n          </InputGroup>\n        </div>\n      </div>\n      <div className=\"row\">\n        {Object.keys(products).map(productId => {\n          const product = products[productId];\n          return(\n            <div className=\"col-12 col-md-6\">\n              <NavLink className=\"nav-link\" to={`/products/${productId}`} state={{product}}>\n                <ProductCard key={productId} product={product} />\n              </NavLink>\n            </div>  \n          )\n        })}\n        {productIds.length > 0 && Object.keys(products).length === 0 ?\n          <div align=\"center\">\n            <div className=\"col-10 col-md-6\">\n              <img src={fake_product} width=\"100%\" />\n              <span>\n                No products found\n              </span>\n            </div>\n          </div>\n        :\n          \"\"\n        }\n      </div>\n\n    </div>\n  )\n}\nexport default Products;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Manufacturers\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Farmers\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\index.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Rating.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\ProductCard.js",["193"],"// import product_default from '../../Assests/Images/product_default.jpg';\nimport Rating from '../Rating';\nconst ProductCard = ({product}) => {\n  return (\n    <div className=\"my-1\">\n      <div className=\"row d-flex justify-content-around align-items-center\">\n        <div className=\"col-12 col-md-4\">\n          <img \n            src={product.item[\"image_url\"]}\n            width=\"100%\"\n          />\n        </div>\n        <div className=\"col-12 col-md-8\">\n          <span className=\"card-key\">Id: </span>\n          <span className=\"card-value\">{product.item[\"id\"]}</span>\n          <br/>\n          <span className=\"card-key\">Name: </span>\n          <span className=\"card-value\">{product.item[\"title\"]}</span>\n          <br/>\n          <span className=\"card-key\">Manufacturer: </span>\n          <span className=\"card-value\">{product.manufacturer[\"name\"]}</span>\n          <br/>\n          <span className='d-flex align-items-center'>\n            <span className=\"card-key\">Rating: </span> &nbsp;\n            <Rating rating={product.item[\"rating\"]/20} editable={false}/>\n          </span>\n          <br/>\n          <span className=\"d-flex justify-content-around\">\n            {product.manufacturer.isVerified?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Verified</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Not Verified</span>\n              </span>\n            }\n            {product.manufacturer.isRenewableUsed?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Eco Friendly</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Non Eco Friendly</span>\n              </span>\n            }\n          </span>\n        </div>\n      </div>\n      <hr/>\n    </div>\n  )\n}\nexport default ProductCard;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\Stakeholder.js",["194","195"],"import { useContext, useEffect, useState } from \"react\";\n\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\nimport { ContractContext } from \"../../Services/Contexts/ContractContext\";\nimport '../../Assests/Styles/card.css';\n// import Toast from \"../Toast\";\nimport stakeholder_default from '../../Assests/Images/stakeholder_default.jpg';\nimport { fetchStakeholder } from \"../../Services/Utils/stakeholder\";\n\nconst StakeholderCard = ({ id }) => {\n  const {authState} = useContext(AuthContext);\n  const {contractState} = useContext(ContractContext);\n  const [stakeholder, setStakeholder] = useState({\n    id: \"00000\",\n    name: \"\",\n    location: \"\",\n    formattedAddress: \"\",\n  });\n\n  useEffect(() => {\n    (async () => {\n      setStakeholder(await fetchStakeholder(\n        authState.address,\n        contractState.stakeholderContract,\n        id\n      ));\n    })();\n  }, []);\n\n  return (\n    <div className=\"col-12 col-lg-6 my-1\">\n      <div className=\"row d-flex justify-content-around align-items-center\">\n        <div className=\"col-12 col-md-4\">\n          <img \n            src={stakeholder_default}\n            width=\"100%\"\n          />\n        </div>\n        <div className=\"col-12 col-md-8\">\n          <span className=\"card-key\">Id: </span>\n          <span className=\"card-value\">{stakeholder.formattedAddress}</span>\n          <br/>\n          <span className=\"card-key\">Name: </span>\n          <span className=\"card-value\">{stakeholder.name}</span>\n          <br/>\n          <span className=\"card-key\">Location: </span>\n          <span className=\"card-value\">{stakeholder.location}</span>\n          <br/>\n          <span className=\"card-key\">Role: </span>\n          <span className=\"card-value\">{stakeholder.role}</span>\n          <br/>\n          {/* <span className=\"\">\n            <span className=\"card-key\"> Verification: </span>\n            {stakeholder.isVerified?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Verified</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Not Verified</span>\n              </span>\n            }\n          </span> */}\n        </div>\n      </div>\n      <hr/>\n    </div>\n  )\n}\nexport default StakeholderCard;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\ManufacturerCard.js",["196","197"],"import { useContext, useEffect, useState } from \"react\";\n\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\nimport { ContractContext } from \"../../Services/Contexts/ContractContext\";\nimport '../../Assests/Styles/card.css';\nimport Toast from \"../Toast\";\nimport manufacturer_default from \"../../Assests/Images/manufacturer_default.jpg\";\nimport { fetchManufacturer } from \"../../Services/Utils/stakeholder\";\n\nconst ManufacturerCard = ({id, manufacturerObject}) => {\n  const {authState} = useContext(AuthContext);\n  const {contractState} = useContext(ContractContext);\n  const role = authState.stakeholder.role;\n  const [manufacturer, setManufacturer] = useState({\n    id: \"00000\",\n    name: \"\",\n    location: \"\",\n    isRenewableUsed: false,\n    rawProducts: [],\n  });\n\n  useEffect(() => {\n    if(manufacturerObject){\n      setManufacturer(manufacturerObject);\n    }\n    else if(contractState.manufacturerContract){\n      (async() => {\n        setManufacturer(await fetchManufacturer(\n          authState.address,\n          contractState.manufacturerContract,\n          id\n        ))\n      })();\n    }\n  }, [manufacturerObject])\n\n  const verify = async () => {\n    try{\n      await contractState.manufacturerContract.methods.verify(id).send({from: authState.address});\n      setManufacturer(manufacturer => {\n        return {\n          ...manufacturer,\n          isVerified: true\n        }\n      })\n      Toast(\"success\", \"Manufacturer verified successfully\");\n    } catch(e){\n      Toast(\"error\", e.message);\n    }\n  }\n\n  const update = async () => {\n    try {\n      await contractState.manufacturerContract.methods.updateEnergy(id).send({from: authState.address});\n      setManufacturer(manufacturer => {\n        return {\n          ...manufacturer,\n          isRenewableUsed: true\n        }\n      })\n      Toast(\"success\", \"Manufacturer's energy updated\");\n    } catch(e){\n      Toast(\"error\", e.message);\n    }\n  }\n\n  return (\n    <div className=\"col-12 col-lg-6 my-1\">\n      <div className=\"row d-flex justify-content-around align-items-center\">\n        <div className=\"col-12 col-md-4\">\n          <img \n            src={manufacturer_default}\n            width=\"100%\"\n          />\n        </div>\n        <div className=\"col-12 col-md-8\">\n          <span className=\"card-key\">Id: </span>\n          <span className=\"card-value\">{manufacturer.formattedAddress}</span>\n          <br/>\n          <span className=\"card-key\">Name: </span>\n          <span className=\"card-value\">{manufacturer.name}</span>\n          <br/>\n          <span className=\"card-key\">Location: </span>\n          <span className=\"card-value\">{manufacturer.location}</span>\n          <br/>\n          <span className=\"\">\n            <span className=\"card-key\"> Energy Usage: </span>\n            {manufacturer.isRenewableUsed?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Renewable</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Non Renewable</span>\n                {role === \"admin\"?\n                  <span \n                    className=\"badge bg-dark mx-1\" \n                    type=\"button\"\n                    onClick={update}\n                  >\n                    <i class=\"fa fa-fire\"/>\n                    Update\n                  </span>\n                : \"\"\n                }\n              </span>\n            }\n          </span>\n          <br/>\n          <span className=\"\">\n            <span className=\"card-key\"> Verification: </span>\n            {manufacturer.isVerified?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Verified</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Not Verified</span>\n                {role === \"admin\"? \n                  <span \n                    className=\"badge bg-dark mx-1\" \n                    type=\"button\"\n                    onClick={verify}\n                  >\n                    <i class=\"fa fa-certificate\"/>\n                    Verify\n                  </span>\n                : \"\"\n                }\n              </span>\n            }\n          </span>\n          <br/>\n          <span>\n            <span className=\"d-flex justify-content-between\">\n              <span className=\"card-key\">Raw Material</span>\n              <span className=\"card-key\">Origin</span>\n            </span>\n            {manufacturer.rawProducts.map(rawProduct => (\n              <span className=\"d-flex justify-content-between my-1\">\n                <span className=\"card-value\">{rawProduct[\"name\"]}</span>\n                {rawProduct[\"isVerified\"]?\n                  <span className=\"badge bg-success\">Verified</span>\n                :\n                  <span className=\"badge bg-danger\">Not Verified</span>\n                }\n              </span>\n            ))}\n          </span>\n        </div>\n      </div>\n      <hr/>\n    </div>\n  )\n}\nexport default ManufacturerCard;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Utils\\product.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Services\\Utils\\stakeholder.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Cards\\FarmerCard.js",["198","199"],"import { useContext, useState, useEffect } from \"react\";\n\nimport { AuthContext } from \"../../Services/Contexts/AuthContext\";\nimport { ContractContext } from \"../../Services/Contexts/ContractContext\";\nimport Toast from '../Toast';\nimport '../../Assests/Styles/card.css';\nimport farmer_default from '../../Assests/Images/farmer_default.jpg';\nimport { fetchFarmer } from \"../../Services/Utils/stakeholder\";\n\nconst FarmerCard = ({id, farmerObject}) => {\n  const {authState} = useContext(AuthContext);\n  const {contractState} = useContext(ContractContext);\n  const role = authState.stakeholder.role;\n  const [farmer, setFarmer] = useState({\n    id: \"00000\",\n    name: \"\",\n    location: \"\",\n    rawProducts: [],\n  });\n\n  useEffect(() => {\n    if(farmerObject){\n      setFarmer(farmerObject);\n    }\n    else if(contractState.farmerContract){\n      (async() => {\n        setFarmer(await fetchFarmer(authState.address, contractState.farmerContract, id));\n      })();\n    }\n  }, [farmerObject])\n\n  const verify = async () => {\n    try{\n      await contractState.farmerContract.methods.verify(id).send({from: authState.address});\n      setFarmer(farmer => {\n        return {\n          ...farmer,\n          isVerified: true\n        }\n      })\n      Toast(\"success\", \"Farmer verified successfully\");\n    } catch(e){\n      Toast(\"error\", e.message);\n    }\n  }\n\n  return (\n    <div className=\"col-12 col-lg-6 my-1\">\n      <div className=\"row d-flex justify-content-around align-items-center\">\n        <div className=\"col-12 col-md-4\">\n          <img \n            src={farmer_default}\n            width=\"100%\"\n          />\n        </div>\n        <div className=\"col-12 col-md-8\">\n          <span className=\"card-key\">Id: </span>\n          <span className=\"card-value\">{farmer.formattedAddress}</span>\n          <br/>\n          <span className=\"card-key\">Name: </span>\n          <span className=\"card-value\">{farmer.name}</span>\n          <br/>\n          <span className=\"card-key\">Location: </span>\n          <span className=\"card-value\">{farmer.location}</span>\n          <br/>\n          <span className=\"card-key\">Raw Products: </span>\n          {farmer.rawProducts.map(rawProduct => (\n            <span className=\"card-value\">{rawProduct+\", \"}</span>\n          ))}\n          <br/>\n          <span className=\"\">\n            <span className=\"card-key\"> Verification: </span>\n            {farmer.isVerified?\n              <span className=\"\">\n                <span className=\"badge bg-success\">Verified</span>\n              </span>\n            :\n              <span className=\"\">\n                <span className=\"badge bg-warning\">Not Verified</span>\n                {role === \"admin\"?\n                  <span \n                    className=\"badge bg-dark mx-1\" \n                    type=\"button\"\n                    onClick={verify}\n                  >\n                    <i class=\"fa fa-certificate\"/>\n                    Verify\n                  </span>\n                : \"\" }\n              </span>\n            }\n          </span>\n        </div>\n      </div>\n      <hr/>\n    </div>\n  )\n}\nexport default FarmerCard;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Modals\\LaunchProduct.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Modals\\AddRawProduct.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\MiddleWrapper.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\TopWrapper.js",["200"],"import img_cover from '../../Assests/Images/dashboard/top_wrapper.jpg';\nconst TopWrapper  = () => {\n  return (\n    <div className=\"top-wrapper\">\n      <div className=\"row d-flex justify-content-between\">\n        <div className=\"col-12 col-md-6\">\n          <img src={img_cover} width=\"100%\"/>\n        </div>\n        <div className=\"col-12 col-md-6\">\n          <div className=\"tw-about text-center\">\n            <p className=\"tw-heading\">\n              Welcome to Transecverse \n            </p>\n            <p className=\"tw-sub-heading\">\n            Our goal is to make food supply chain transparent and secure. We provide evidence that the food you are eating is original as well as authentic\nOnce again Welcome to TRANSECVERSE.\n            </p>\n          </div>\n        </div>\n      </div>\n      <hr/>\n    </div>\n  ) \n}\nexport default TopWrapper;","D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Pages\\Dashboard\\BottomWrapper.js",[],"D:\\MIT Academy of Engineering\\Major Project\\Major_Project_Code\\supply-chain-dev\\src\\Components\\Loading.js",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":81,"column":6,"nodeType":"207","endLine":81,"endColumn":61,"suggestions":"208"},{"ruleId":"205","severity":1,"message":"209","line":87,"column":6,"nodeType":"207","endLine":87,"endColumn":41,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":101,"column":15,"nodeType":"213","messageId":"214","endLine":101,"endColumn":17},{"ruleId":"215","severity":1,"message":"216","line":83,"column":11,"nodeType":"217","endLine":83,"endColumn":29},{"ruleId":"218","severity":1,"message":"219","line":4,"column":3,"nodeType":"220","messageId":"221","endLine":63,"endColumn":4},{"ruleId":"218","severity":1,"message":"219","line":4,"column":3,"nodeType":"220","messageId":"221","endLine":63,"endColumn":4},{"ruleId":"222","severity":1,"message":"223","line":1,"column":22,"nodeType":"224","messageId":"225","endLine":1,"endColumn":31},{"ruleId":"222","severity":1,"message":"226","line":24,"column":19,"nodeType":"224","messageId":"225","endLine":24,"endColumn":29},{"ruleId":"211","severity":1,"message":"212","line":24,"column":74,"nodeType":"213","messageId":"214","endLine":24,"endColumn":76},{"ruleId":"215","severity":1,"message":"216","line":103,"column":11,"nodeType":"217","endLine":103,"endColumn":62},{"ruleId":"222","severity":1,"message":"227","line":15,"column":31,"nodeType":"224","messageId":"225","endLine":15,"endColumn":53},{"ruleId":"205","severity":1,"message":"228","line":29,"column":6,"nodeType":"207","endLine":29,"endColumn":8,"suggestions":"229"},{"ruleId":"222","severity":1,"message":"230","line":12,"column":25,"nodeType":"224","messageId":"225","endLine":12,"endColumn":41},{"ruleId":"205","severity":1,"message":"231","line":22,"column":5,"nodeType":"207","endLine":22,"endColumn":7,"suggestions":"232"},{"ruleId":"205","severity":1,"message":"233","line":26,"column":5,"nodeType":"207","endLine":26,"endColumn":7,"suggestions":"234"},{"ruleId":"211","severity":1,"message":"235","line":41,"column":40,"nodeType":"213","messageId":"214","endLine":41,"endColumn":42},{"ruleId":"205","severity":1,"message":"236","line":49,"column":6,"nodeType":"207","endLine":49,"endColumn":18,"suggestions":"237"},{"ruleId":"211","severity":1,"message":"212","line":60,"column":28,"nodeType":"213","messageId":"214","endLine":60,"endColumn":30},{"ruleId":"215","severity":1,"message":"216","line":83,"column":15,"nodeType":"217","endLine":83,"endColumn":54},{"ruleId":"215","severity":1,"message":"216","line":8,"column":11,"nodeType":"217","endLine":11,"endColumn":13},{"ruleId":"205","severity":1,"message":"238","line":28,"column":6,"nodeType":"207","endLine":28,"endColumn":8,"suggestions":"239"},{"ruleId":"215","severity":1,"message":"216","line":34,"column":11,"nodeType":"217","endLine":37,"endColumn":13},{"ruleId":"205","severity":1,"message":"240","line":35,"column":6,"nodeType":"207","endLine":35,"endColumn":26,"suggestions":"241"},{"ruleId":"215","severity":1,"message":"216","line":71,"column":11,"nodeType":"217","endLine":74,"endColumn":13},{"ruleId":"205","severity":1,"message":"242","line":30,"column":6,"nodeType":"207","endLine":30,"endColumn":20,"suggestions":"243"},{"ruleId":"215","severity":1,"message":"216","line":51,"column":11,"nodeType":"217","endLine":54,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":7,"column":11,"nodeType":"217","endLine":7,"endColumn":46},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authState.address' and 'networkId'. Either include them or remove the dependency array.","ArrayExpression",["246"],"React Hook useEffect has a missing dependency: 'loadStakeholder'. Either include it or remove the dependency array.",["247"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setIsOnwer' is assigned a value but never used.","'setManufacturerAddress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contractState.manufacturerContract' and 'loadManufacturer'. Either include them or remove the dependency array.",["248"],"'setFarmerAddress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authState.address', 'contractState.farmerContract', and 'farmerAddress'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFarmer' needs the current value of 'farmerAddress'.",["249"],"React Hook useEffect has missing dependencies: 'authState.address' and 'contractState.productContract'. Either include them or remove the dependency array.",["250"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'authState.address', 'contractState.manufacturerContract', and 'contractState.productContract'. Either include them or remove the dependency array.",["251"],"React Hook useEffect has missing dependencies: 'authState.address', 'contractState.stakeholderContract', and 'id'. Either include them or remove the dependency array. If 'setStakeholder' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["252"],"React Hook useEffect has missing dependencies: 'authState.address', 'contractState.manufacturerContract', and 'id'. Either include them or remove the dependency array. If 'setManufacturer' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["253"],"React Hook useEffect has missing dependencies: 'authState.address', 'contractState.farmerContract', and 'id'. Either include them or remove the dependency array. If 'setFarmer' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["254"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},"Update the dependencies array to be: [authState.address, authState.isAuthenticated, contractState.mainContract, networkId]",{"range":"273","text":"274"},"Update the dependencies array to be: [contractState.stakeholderContract, loadStakeholder]",{"range":"275","text":"276"},"Update the dependencies array to be: [contractState.manufacturerContract, loadManufacturer]",{"range":"277","text":"278"},"Update the dependencies array to be: [authState.address, contractState.farmerContract, farmerAddress]",{"range":"279","text":"280"},"Update the dependencies array to be: [authState.address, contractState.productContract]",{"range":"281","text":"282"},"Update the dependencies array to be: [authState.address, contractState.manufacturerContract, contractState.productContract, productIds]",{"range":"283","text":"284"},"Update the dependencies array to be: [authState.address, contractState.stakeholderContract, id]",{"range":"285","text":"286"},"Update the dependencies array to be: [authState.address, contractState.manufacturerContract, id, manufacturerObject]",{"range":"287","text":"288"},"Update the dependencies array to be: [authState.address, contractState.farmerContract, farmerObject, id]",{"range":"289","text":"290"},[3603,3658],"[authState.address, authState.isAuthenticated, contractState.mainContract, networkId]",[3746,3781],"[contractState.stakeholderContract, loadStakeholder]",[1258,1260],"[contractState.manufacturerContract, loadManufacturer]",[874,876],"[authState.address, contractState.farmerContract, farmerAddress]",[1086,1088],"[authState.address, contractState.productContract]",[1971,1983],"[authState.address, contractState.manufacturerContract, contractState.productContract, productIds]",[886,888],"[authState.address, contractState.stakeholderContract, id]",[1120,1140],"[authState.address, contractState.manufacturerContract, id, manufacturerObject]",[969,983],"[authState.address, contractState.farmerContract, farmerObject, id]"]