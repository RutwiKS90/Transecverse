{"ast":null,"code":"var _jsxFileName = \"D:\\\\MIT Academy of Engineering\\\\Major Project\\\\Major_Project_Code\\\\supply-chain-dev\\\\src\\\\Services\\\\Contexts\\\\ContractContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useEffect, useReducer, useState } from \"react\";\nimport { contractReducer } from \"../Reducers/ContractReducer\";\nimport MainContract from '../../Smart-Contract/ABI/Main.json';\nimport StakeholderContract from '../../Smart-Contract/ABI/Stakeholder.json';\nimport FarmerContract from '../../Smart-Contract/ABI/Farmer.json';\nimport ManufacturerContract from '../../Smart-Contract/ABI/Manufacturer.json';\nimport ProductContract from '../../Smart-Contract/ABI/Product.json';\nimport { contractStateMain, contractStateProduct, contractStateFarmer, contractStateManufacturer, contractStateStakeholder, contractStateStats } from '../Actions/ContractActionCreator';\nimport { authStateStakeholder } from '../Actions/AuthActionCreator';\nimport { AuthContext } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractContext = /*#__PURE__*/createContext();\nexport const ContractContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [contractState, contractDispatch] = useReducer(contractReducer, {\n    isLoading: false,\n    errMess: null,\n    mainContract: null,\n    farmerContract: null,\n    manufacturerContract: null,\n    stakeholderContract: null,\n    productContract: null,\n    stats: {\n      productsCount: 0,\n      transactionsCount: 0,\n      reviewsCount: 0\n    }\n  });\n  const [networkId, setNetworkId] = useState(null);\n  const {\n    authState,\n    authDispatch\n  } = useContext(AuthContext);\n  useEffect(() => {\n    (async () => {\n      if (authState.isWeb3Enabled) {\n        const web3 = window.web3;\n        const networkId = await web3.eth.net.getId();\n        setNetworkId(networkId);\n        const main = new web3.eth.Contract(MainContract.abi, MainContract.networks[networkId].address);\n        contractDispatch(contractStateMain(main));\n        const product = new web3.eth.Contract(ProductContract.abi, ProductContract.networks[networkId].address);\n        contractDispatch(contractStateProduct(product));\n        const farmer = new web3.eth.Contract(FarmerContract.abi, FarmerContract.networks[networkId].address);\n        contractDispatch(contractStateFarmer(farmer));\n        const manufacturer = new web3.eth.Contract(ManufacturerContract.abi, ManufacturerContract.networks[networkId].address);\n        contractDispatch(contractStateManufacturer(manufacturer));\n        const stats = {};\n        stats[\"productsCount\"] = await product.methods.getProductsCount().call();\n        stats[\"transactionsCount\"] = await product.methods.getTransactionsCount().call();\n        stats[\"reviewsCount\"] = await product.methods.getReviewsCount().call();\n        contractDispatch(contractStateStats(stats));\n      }\n    })();\n  }, [authState.isWeb3Enabled]);\n  useEffect(() => {\n    (async () => {\n      if (authState.isAuthenticated && contractState.mainContract) {\n        const web3 = window.web3;\n        const role = await contractState.mainContract.methods.getRole(authState.address).call();\n        if (role === \"farmer\") {\n          const farmer = new web3.eth.Contract(FarmerContract.abi, FarmerContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(farmer));\n        } else if (role === 'manufacturer') {\n          const manufacturer = new web3.eth.Contract(ManufacturerContract.abi, ManufacturerContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(manufacturer));\n        } else {\n          const stakeholder = new web3.eth.Contract(StakeholderContract.abi, StakeholderContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(stakeholder));\n        }\n      }\n    })();\n  }, [authState.isAuthenticated, contractState.mainContract]);\n  useEffect(() => {\n    (async () => {\n      await loadStakeholder();\n    })();\n  }, [contractState.stakeholderContract]);\n  const loadStakeholder = async () => {\n    if (contractState.stakeholderContract) {\n      let stakeholderDetails = await contractState.stakeholderContract.methods.get(authState.address).call({\n        from: authState.address\n      });\n      stakeholderDetails = {\n        id: stakeholderDetails.id,\n        name: stakeholderDetails.name,\n        location: stakeholderDetails.location,\n        role: stakeholderDetails.role === \"\" ? \"new\" : stakeholderDetails.role,\n        isRegistered: stakeholderDetails.role === \"\" ? false : true,\n        isVerified: stakeholderDetails.isVerified\n      };\n      const role = await contractState.mainContract.methods.getRole(authState.address).call();\n      if (role == \"admin\") {\n        stakeholderDetails.role = role;\n      }\n      authDispatch(authStateStakeholder(stakeholderDetails));\n    }\n  };\n  const updateStats = async () => {\n    const stats = {};\n    stats[\"productsCount\"] = await contractState.productContract.methods.getProductsCount().call();\n    stats[\"transactionsCount\"] = await contractState.productContract.methods.getTransactionsCount().call();\n    stats[\"reviewsCount\"] = await contractState.productContract.methods.getReviewsCount().call();\n    contractDispatch(contractStateStats(stats));\n  };\n  return /*#__PURE__*/_jsxDEV(ContractContext.Provider, {\n    value: {\n      contractState,\n      contractDispatch,\n      updateStats,\n      loadStakeholder\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(ContractContextProvider, \"TA33xnupCZgp3gYyNkm5OzncPyA=\");\n_c = ContractContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContractContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useReducer","useState","contractReducer","MainContract","StakeholderContract","FarmerContract","ManufacturerContract","ProductContract","contractStateMain","contractStateProduct","contractStateFarmer","contractStateManufacturer","contractStateStakeholder","contractStateStats","authStateStakeholder","AuthContext","jsxDEV","_jsxDEV","ContractContext","ContractContextProvider","_ref","_s","children","contractState","contractDispatch","isLoading","errMess","mainContract","farmerContract","manufacturerContract","stakeholderContract","productContract","stats","productsCount","transactionsCount","reviewsCount","networkId","setNetworkId","authState","authDispatch","isWeb3Enabled","web3","window","eth","net","getId","main","Contract","abi","networks","address","product","farmer","manufacturer","methods","getProductsCount","call","getTransactionsCount","getReviewsCount","isAuthenticated","role","getRole","stakeholder","loadStakeholder","stakeholderDetails","get","from","id","name","location","isRegistered","isVerified","updateStats","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MIT Academy of Engineering/Major Project/Major_Project_Code/supply-chain-dev/src/Services/Contexts/ContractContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useReducer, useState } from \"react\";\nimport { contractReducer } from \"../Reducers/ContractReducer\";\n\nimport MainContract from '../../Smart-Contract/ABI/Main.json';\nimport StakeholderContract from '../../Smart-Contract/ABI/Stakeholder.json';\nimport FarmerContract from '../../Smart-Contract/ABI/Farmer.json';\nimport ManufacturerContract from '../../Smart-Contract/ABI/Manufacturer.json';\nimport ProductContract from '../../Smart-Contract/ABI/Product.json';\nimport { \n  contractStateMain, \n  contractStateProduct,\n  contractStateFarmer, \n  contractStateManufacturer,\n  contractStateStakeholder, \n  contractStateStats \n} from '../Actions/ContractActionCreator';\nimport { authStateStakeholder } from '../Actions/AuthActionCreator';\nimport { AuthContext } from \"./AuthContext\";\n\nexport const ContractContext = createContext();\nexport const ContractContextProvider = ({children}) => {\n  const [contractState, contractDispatch] = useReducer(contractReducer, {\n    isLoading: false,\n    errMess: null,\n    mainContract: null,\n    farmerContract: null,\n    manufacturerContract: null,\n    stakeholderContract: null,\n    productContract: null,\n    stats: {\n      productsCount: 0,\n      transactionsCount: 0,\n      reviewsCount: 0\n    }\n  })\n  const [networkId, setNetworkId] = useState(null);\n  const { authState, authDispatch } = useContext(AuthContext);\n\n  useEffect(() => {\n    (async () => {\n      if(authState.isWeb3Enabled){\n        const web3 = window.web3;\n        const networkId = await web3.eth.net.getId();\n        setNetworkId(networkId);\n        const main = new web3.eth.Contract(MainContract.abi, MainContract.networks[networkId].address);\n        contractDispatch(contractStateMain(main));\n        const product  = new web3.eth.Contract(ProductContract.abi, ProductContract.networks[networkId].address);\n        contractDispatch(contractStateProduct(product));\n        const farmer = new web3.eth.Contract(FarmerContract.abi, FarmerContract.networks[networkId].address);\n        contractDispatch(contractStateFarmer(farmer));\n        const manufacturer = new web3.eth.Contract(ManufacturerContract.abi, ManufacturerContract.networks[networkId].address);\n        contractDispatch(contractStateManufacturer(manufacturer));\n        const stats = {};\n        stats[\"productsCount\"] = await product.methods.getProductsCount().call();\n        stats[\"transactionsCount\"] = await product.methods.getTransactionsCount().call();\n        stats[\"reviewsCount\"] = await product.methods.getReviewsCount().call();\n        contractDispatch(contractStateStats(stats));\n      }\n    })();\n  }, [authState.isWeb3Enabled])\n\n  useEffect(() => {\n    (async () => {\n      if(authState.isAuthenticated && contractState.mainContract){\n        const web3 = window.web3;\n        const role = await contractState.mainContract.methods.getRole(authState.address).call();\n        if( role === \"farmer\"){\n          const farmer = new web3.eth.Contract(FarmerContract.abi, FarmerContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(farmer));\n        }\n        else if(role === 'manufacturer'){\n          const manufacturer = new web3.eth.Contract(ManufacturerContract.abi, ManufacturerContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(manufacturer));\n        }\n        else {\n          const stakeholder = new web3.eth.Contract(StakeholderContract.abi, StakeholderContract.networks[networkId].address);\n          contractDispatch(contractStateStakeholder(stakeholder));\n        }\n      }\n    })();\n  }, [authState.isAuthenticated, contractState.mainContract])\n\n  useEffect(() => {\n    (async () => {\n      await loadStakeholder();\n    })();\n  }, [contractState.stakeholderContract])\n\n  const loadStakeholder = async () => {\n    if(contractState.stakeholderContract){\n      let stakeholderDetails = await contractState.stakeholderContract.methods.get(authState.address).call({from: authState.address});\n      stakeholderDetails = {\n        id: stakeholderDetails.id,\n        name: stakeholderDetails.name,\n        location: stakeholderDetails.location,\n        role: stakeholderDetails.role === \"\" ? \"new\" : stakeholderDetails.role,\n        isRegistered: stakeholderDetails.role === \"\" ? false : true,\n        isVerified: stakeholderDetails.isVerified\n      }\n      const role = await contractState.mainContract.methods.getRole(authState.address).call();\n      if(role == \"admin\"){\n        stakeholderDetails.role = role;\n      }\n      authDispatch(authStateStakeholder(stakeholderDetails));\n    }\n  }\n\n  const updateStats = async () => {\n    const stats = {};\n    stats[\"productsCount\"] = await contractState.productContract.methods.getProductsCount().call();\n    stats[\"transactionsCount\"] = await contractState.productContract.methods.getTransactionsCount().call();\n    stats[\"reviewsCount\"] = await contractState.productContract.methods.getReviewsCount().call();\n    contractDispatch(contractStateStats(stats));\n  }\n\n  return (\n    <ContractContext.Provider value={{contractState, contractDispatch, updateStats, loadStakeholder}}>\n      {children}\n    </ContractContext.Provider>\n  )\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}